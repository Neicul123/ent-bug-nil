// Code generated by ent, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeStudies holds the string denoting the studies edge name in mutations.
	EdgeStudies = "studies"
	// EdgeSettings holds the string denoting the settings edge name in mutations.
	EdgeSettings = "settings"
	// Table holds the table name of the user in the database.
	Table = "users"
	// StudiesTable is the table that holds the studies relation/edge. The primary key declared below.
	StudiesTable = "settings"
	// StudiesInverseTable is the table name for the List entity.
	// It exists in this package in order to avoid circular dependency with the "list" package.
	StudiesInverseTable = "lists"
	// SettingsTable is the table that holds the settings relation/edge.
	SettingsTable = "settings"
	// SettingsInverseTable is the table name for the Settings entity.
	// It exists in this package in order to avoid circular dependency with the "settings" package.
	SettingsInverseTable = "settings"
	// SettingsColumn is the table column denoting the settings relation/edge.
	SettingsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldAge,
	FieldName,
}

var (
	// StudiesPrimaryKey and StudiesColumn2 are the table columns denoting the
	// primary key for the studies relation (M2M).
	StudiesPrimaryKey = []string{"user_id", "list_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
