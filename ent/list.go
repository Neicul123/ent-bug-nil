// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/list"
	"entgo.io/ent/dialect/sql"
)

// List is the model entity for the List schema.
type List struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ListQuery when eager-loading is set.
	Edges ListEdges `json:"edges"`
}

// ListEdges holds the relations/edges for other nodes in the graph.
type ListEdges struct {
	// Studying holds the value of the studying edge.
	Studying []*User `json:"studying,omitempty"`
	// Settings holds the value of the settings edge.
	Settings []*Settings `json:"settings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StudyingOrErr returns the Studying value or an error if the edge
// was not loaded in eager-loading.
func (e ListEdges) StudyingOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Studying, nil
	}
	return nil, &NotLoadedError{edge: "studying"}
}

// SettingsOrErr returns the Settings value or an error if the edge
// was not loaded in eager-loading.
func (e ListEdges) SettingsOrErr() ([]*Settings, error) {
	if e.loadedTypes[1] {
		return e.Settings, nil
	}
	return nil, &NotLoadedError{edge: "settings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*List) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case list.FieldID, list.FieldUserID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type List", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the List fields.
func (l *List) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case list.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case list.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				l.UserID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStudying queries the "studying" edge of the List entity.
func (l *List) QueryStudying() *UserQuery {
	return (&ListClient{config: l.config}).QueryStudying(l)
}

// QuerySettings queries the "settings" edge of the List entity.
func (l *List) QuerySettings() *SettingsQuery {
	return (&ListClient{config: l.config}).QuerySettings(l)
}

// Update returns a builder for updating this List.
// Note that you need to call List.Unwrap() before calling this method if this List
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *List) Update() *ListUpdateOne {
	return (&ListClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the List entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *List) Unwrap() *List {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: List is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *List) String() string {
	var builder strings.Builder
	builder.WriteString("List(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", l.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Lists is a parsable slice of List.
type Lists []*List

func (l Lists) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
