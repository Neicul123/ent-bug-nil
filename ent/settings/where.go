// Code generated by ent, DO NOT EDIT.

package settings

import (
	"entgo.io/bug/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// ListID applies equality check predicate on the "list_id" field. It's identical to ListIDEQ.
func ListID(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListID), v))
	})
}

// Test applies equality check predicate on the "test" field. It's identical to TestEQ.
func Test(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTest), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Settings {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Settings {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// ListIDEQ applies the EQ predicate on the "list_id" field.
func ListIDEQ(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListID), v))
	})
}

// ListIDNEQ applies the NEQ predicate on the "list_id" field.
func ListIDNEQ(v int) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldListID), v))
	})
}

// ListIDIn applies the In predicate on the "list_id" field.
func ListIDIn(vs ...int) predicate.Settings {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldListID), v...))
	})
}

// ListIDNotIn applies the NotIn predicate on the "list_id" field.
func ListIDNotIn(vs ...int) predicate.Settings {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldListID), v...))
	})
}

// TestEQ applies the EQ predicate on the "test" field.
func TestEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTest), v))
	})
}

// TestNEQ applies the NEQ predicate on the "test" field.
func TestNEQ(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTest), v))
	})
}

// TestIn applies the In predicate on the "test" field.
func TestIn(vs ...string) predicate.Settings {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTest), v...))
	})
}

// TestNotIn applies the NotIn predicate on the "test" field.
func TestNotIn(vs ...string) predicate.Settings {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTest), v...))
	})
}

// TestGT applies the GT predicate on the "test" field.
func TestGT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTest), v))
	})
}

// TestGTE applies the GTE predicate on the "test" field.
func TestGTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTest), v))
	})
}

// TestLT applies the LT predicate on the "test" field.
func TestLT(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTest), v))
	})
}

// TestLTE applies the LTE predicate on the "test" field.
func TestLTE(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTest), v))
	})
}

// TestContains applies the Contains predicate on the "test" field.
func TestContains(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTest), v))
	})
}

// TestHasPrefix applies the HasPrefix predicate on the "test" field.
func TestHasPrefix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTest), v))
	})
}

// TestHasSuffix applies the HasSuffix predicate on the "test" field.
func TestHasSuffix(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTest), v))
	})
}

// TestEqualFold applies the EqualFold predicate on the "test" field.
func TestEqualFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTest), v))
	})
}

// TestContainsFold applies the ContainsFold predicate on the "test" field.
func TestContainsFold(v string) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTest), v))
	})
}

// HasList applies the HasEdge predicate on the "list" edge.
func HasList() predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ListTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ListTable, ListColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasListWith applies the HasEdge predicate on the "list" edge with a given conditions (other predicates).
func HasListWith(preds ...predicate.List) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ListInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ListTable, ListColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Settings) predicate.Settings {
	return predicate.Settings(func(s *sql.Selector) {
		p(s.Not())
	})
}
