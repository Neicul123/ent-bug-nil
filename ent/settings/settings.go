// Code generated by ent, DO NOT EDIT.

package settings

const (
	// Label holds the string label denoting the settings type in the database.
	Label = "settings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldListID holds the string denoting the list_id field in the database.
	FieldListID = "list_id"
	// FieldTest holds the string denoting the test field in the database.
	FieldTest = "test"
	// EdgeList holds the string denoting the list edge name in mutations.
	EdgeList = "list"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the settings in the database.
	Table = "settings"
	// ListTable is the table that holds the list relation/edge.
	ListTable = "settings"
	// ListInverseTable is the table name for the List entity.
	// It exists in this package in order to avoid circular dependency with the "list" package.
	ListInverseTable = "lists"
	// ListColumn is the table column denoting the list relation/edge.
	ListColumn = "list_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "settings"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for settings fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldListID,
	FieldTest,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
