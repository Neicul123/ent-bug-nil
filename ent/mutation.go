// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/bug/ent/list"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/settings"
	"entgo.io/bug/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeList     = "List"
	TypeSettings = "Settings"
	TypeUser     = "User"
)

// ListMutation represents an operation that mutates the List nodes in the graph.
type ListMutation struct {
	config
	op              Op
	typ             string
	id              *int
	user_id         *int
	adduser_id      *int
	clearedFields   map[string]struct{}
	studying        map[int]struct{}
	removedstudying map[int]struct{}
	clearedstudying bool
	settings        map[int]struct{}
	removedsettings map[int]struct{}
	clearedsettings bool
	done            bool
	oldValue        func(context.Context) (*List, error)
	predicates      []predicate.List
}

var _ ent.Mutation = (*ListMutation)(nil)

// listOption allows management of the mutation configuration using functional options.
type listOption func(*ListMutation)

// newListMutation creates new mutation for the List entity.
func newListMutation(c config, op Op, opts ...listOption) *ListMutation {
	m := &ListMutation{
		config:        c,
		op:            op,
		typ:           TypeList,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withListID sets the ID field of the mutation.
func withListID(id int) listOption {
	return func(m *ListMutation) {
		var (
			err   error
			once  sync.Once
			value *List
		)
		m.oldValue = func(ctx context.Context) (*List, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().List.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withList sets the old List of the mutation.
func withList(node *List) listOption {
	return func(m *ListMutation) {
		m.oldValue = func(context.Context) (*List, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ListMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ListMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ListMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ListMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().List.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *ListMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ListMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the List entity.
// If the List object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ListMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *ListMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *ListMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ListMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// AddStudyingIDs adds the "studying" edge to the User entity by ids.
func (m *ListMutation) AddStudyingIDs(ids ...int) {
	if m.studying == nil {
		m.studying = make(map[int]struct{})
	}
	for i := range ids {
		m.studying[ids[i]] = struct{}{}
	}
}

// ClearStudying clears the "studying" edge to the User entity.
func (m *ListMutation) ClearStudying() {
	m.clearedstudying = true
}

// StudyingCleared reports if the "studying" edge to the User entity was cleared.
func (m *ListMutation) StudyingCleared() bool {
	return m.clearedstudying
}

// RemoveStudyingIDs removes the "studying" edge to the User entity by IDs.
func (m *ListMutation) RemoveStudyingIDs(ids ...int) {
	if m.removedstudying == nil {
		m.removedstudying = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.studying, ids[i])
		m.removedstudying[ids[i]] = struct{}{}
	}
}

// RemovedStudying returns the removed IDs of the "studying" edge to the User entity.
func (m *ListMutation) RemovedStudyingIDs() (ids []int) {
	for id := range m.removedstudying {
		ids = append(ids, id)
	}
	return
}

// StudyingIDs returns the "studying" edge IDs in the mutation.
func (m *ListMutation) StudyingIDs() (ids []int) {
	for id := range m.studying {
		ids = append(ids, id)
	}
	return
}

// ResetStudying resets all changes to the "studying" edge.
func (m *ListMutation) ResetStudying() {
	m.studying = nil
	m.clearedstudying = false
	m.removedstudying = nil
}

// AddSettingIDs adds the "settings" edge to the Settings entity by ids.
func (m *ListMutation) AddSettingIDs(ids ...int) {
	if m.settings == nil {
		m.settings = make(map[int]struct{})
	}
	for i := range ids {
		m.settings[ids[i]] = struct{}{}
	}
}

// ClearSettings clears the "settings" edge to the Settings entity.
func (m *ListMutation) ClearSettings() {
	m.clearedsettings = true
}

// SettingsCleared reports if the "settings" edge to the Settings entity was cleared.
func (m *ListMutation) SettingsCleared() bool {
	return m.clearedsettings
}

// RemoveSettingIDs removes the "settings" edge to the Settings entity by IDs.
func (m *ListMutation) RemoveSettingIDs(ids ...int) {
	if m.removedsettings == nil {
		m.removedsettings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.settings, ids[i])
		m.removedsettings[ids[i]] = struct{}{}
	}
}

// RemovedSettings returns the removed IDs of the "settings" edge to the Settings entity.
func (m *ListMutation) RemovedSettingsIDs() (ids []int) {
	for id := range m.removedsettings {
		ids = append(ids, id)
	}
	return
}

// SettingsIDs returns the "settings" edge IDs in the mutation.
func (m *ListMutation) SettingsIDs() (ids []int) {
	for id := range m.settings {
		ids = append(ids, id)
	}
	return
}

// ResetSettings resets all changes to the "settings" edge.
func (m *ListMutation) ResetSettings() {
	m.settings = nil
	m.clearedsettings = false
	m.removedsettings = nil
}

// Where appends a list predicates to the ListMutation builder.
func (m *ListMutation) Where(ps ...predicate.List) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ListMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (List).
func (m *ListMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ListMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.user_id != nil {
		fields = append(fields, list.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ListMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case list.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ListMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case list.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown List field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ListMutation) SetField(name string, value ent.Value) error {
	switch name {
	case list.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown List field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ListMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, list.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ListMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case list.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ListMutation) AddField(name string, value ent.Value) error {
	switch name {
	case list.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown List numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ListMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ListMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ListMutation) ClearField(name string) error {
	return fmt.Errorf("unknown List nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ListMutation) ResetField(name string) error {
	switch name {
	case list.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown List field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ListMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.studying != nil {
		edges = append(edges, list.EdgeStudying)
	}
	if m.settings != nil {
		edges = append(edges, list.EdgeSettings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ListMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case list.EdgeStudying:
		ids := make([]ent.Value, 0, len(m.studying))
		for id := range m.studying {
			ids = append(ids, id)
		}
		return ids
	case list.EdgeSettings:
		ids := make([]ent.Value, 0, len(m.settings))
		for id := range m.settings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ListMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedstudying != nil {
		edges = append(edges, list.EdgeStudying)
	}
	if m.removedsettings != nil {
		edges = append(edges, list.EdgeSettings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ListMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case list.EdgeStudying:
		ids := make([]ent.Value, 0, len(m.removedstudying))
		for id := range m.removedstudying {
			ids = append(ids, id)
		}
		return ids
	case list.EdgeSettings:
		ids := make([]ent.Value, 0, len(m.removedsettings))
		for id := range m.removedsettings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ListMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstudying {
		edges = append(edges, list.EdgeStudying)
	}
	if m.clearedsettings {
		edges = append(edges, list.EdgeSettings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ListMutation) EdgeCleared(name string) bool {
	switch name {
	case list.EdgeStudying:
		return m.clearedstudying
	case list.EdgeSettings:
		return m.clearedsettings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ListMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown List unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ListMutation) ResetEdge(name string) error {
	switch name {
	case list.EdgeStudying:
		m.ResetStudying()
		return nil
	case list.EdgeSettings:
		m.ResetSettings()
		return nil
	}
	return fmt.Errorf("unknown List edge %s", name)
}

// SettingsMutation represents an operation that mutates the Settings nodes in the graph.
type SettingsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	test          *string
	clearedFields map[string]struct{}
	list          *int
	clearedlist   bool
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Settings, error)
	predicates    []predicate.Settings
}

var _ ent.Mutation = (*SettingsMutation)(nil)

// settingsOption allows management of the mutation configuration using functional options.
type settingsOption func(*SettingsMutation)

// newSettingsMutation creates new mutation for the Settings entity.
func newSettingsMutation(c config, op Op, opts ...settingsOption) *SettingsMutation {
	m := &SettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSettingsID sets the ID field of the mutation.
func withSettingsID(id int) settingsOption {
	return func(m *SettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *Settings
		)
		m.oldValue = func(ctx context.Context) (*Settings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Settings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSettings sets the old Settings of the mutation.
func withSettings(node *Settings) settingsOption {
	return func(m *SettingsMutation) {
		m.oldValue = func(context.Context) (*Settings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SettingsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SettingsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Settings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *SettingsMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SettingsMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SettingsMutation) ResetUserID() {
	m.user = nil
}

// SetListID sets the "list_id" field.
func (m *SettingsMutation) SetListID(i int) {
	m.list = &i
}

// ListID returns the value of the "list_id" field in the mutation.
func (m *SettingsMutation) ListID() (r int, exists bool) {
	v := m.list
	if v == nil {
		return
	}
	return *v, true
}

// OldListID returns the old "list_id" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldListID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldListID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldListID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldListID: %w", err)
	}
	return oldValue.ListID, nil
}

// ResetListID resets all changes to the "list_id" field.
func (m *SettingsMutation) ResetListID() {
	m.list = nil
}

// SetTest sets the "test" field.
func (m *SettingsMutation) SetTest(s string) {
	m.test = &s
}

// Test returns the value of the "test" field in the mutation.
func (m *SettingsMutation) Test() (r string, exists bool) {
	v := m.test
	if v == nil {
		return
	}
	return *v, true
}

// OldTest returns the old "test" field's value of the Settings entity.
// If the Settings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingsMutation) OldTest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTest: %w", err)
	}
	return oldValue.Test, nil
}

// ResetTest resets all changes to the "test" field.
func (m *SettingsMutation) ResetTest() {
	m.test = nil
}

// ClearList clears the "list" edge to the List entity.
func (m *SettingsMutation) ClearList() {
	m.clearedlist = true
}

// ListCleared reports if the "list" edge to the List entity was cleared.
func (m *SettingsMutation) ListCleared() bool {
	return m.clearedlist
}

// ListIDs returns the "list" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ListID instead. It exists only for internal usage by the builders.
func (m *SettingsMutation) ListIDs() (ids []int) {
	if id := m.list; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetList resets all changes to the "list" edge.
func (m *SettingsMutation) ResetList() {
	m.list = nil
	m.clearedlist = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *SettingsMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SettingsMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SettingsMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SettingsMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SettingsMutation builder.
func (m *SettingsMutation) Where(ps ...predicate.Settings) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SettingsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Settings).
func (m *SettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SettingsMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user != nil {
		fields = append(fields, settings.FieldUserID)
	}
	if m.list != nil {
		fields = append(fields, settings.FieldListID)
	}
	if m.test != nil {
		fields = append(fields, settings.FieldTest)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case settings.FieldUserID:
		return m.UserID()
	case settings.FieldListID:
		return m.ListID()
	case settings.FieldTest:
		return m.Test()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case settings.FieldUserID:
		return m.OldUserID(ctx)
	case settings.FieldListID:
		return m.OldListID(ctx)
	case settings.FieldTest:
		return m.OldTest(ctx)
	}
	return nil, fmt.Errorf("unknown Settings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case settings.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case settings.FieldListID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetListID(v)
		return nil
	case settings.FieldTest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTest(v)
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SettingsMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SettingsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Settings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SettingsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SettingsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Settings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SettingsMutation) ResetField(name string) error {
	switch name {
	case settings.FieldUserID:
		m.ResetUserID()
		return nil
	case settings.FieldListID:
		m.ResetListID()
		return nil
	case settings.FieldTest:
		m.ResetTest()
		return nil
	}
	return fmt.Errorf("unknown Settings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.list != nil {
		edges = append(edges, settings.EdgeList)
	}
	if m.user != nil {
		edges = append(edges, settings.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SettingsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case settings.EdgeList:
		if id := m.list; id != nil {
			return []ent.Value{*id}
		}
	case settings.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SettingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlist {
		edges = append(edges, settings.EdgeList)
	}
	if m.cleareduser {
		edges = append(edges, settings.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SettingsMutation) EdgeCleared(name string) bool {
	switch name {
	case settings.EdgeList:
		return m.clearedlist
	case settings.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SettingsMutation) ClearEdge(name string) error {
	switch name {
	case settings.EdgeList:
		m.ClearList()
		return nil
	case settings.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Settings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SettingsMutation) ResetEdge(name string) error {
	switch name {
	case settings.EdgeList:
		m.ResetList()
		return nil
	case settings.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Settings edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	age             *int
	addage          *int
	name            *string
	clearedFields   map[string]struct{}
	studies         map[int]struct{}
	removedstudies  map[int]struct{}
	clearedstudies  bool
	settings        map[int]struct{}
	removedsettings map[int]struct{}
	clearedsettings bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAge sets the "age" field.
func (m *UserMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *UserMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *UserMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *UserMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *UserMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// AddStudyIDs adds the "studies" edge to the List entity by ids.
func (m *UserMutation) AddStudyIDs(ids ...int) {
	if m.studies == nil {
		m.studies = make(map[int]struct{})
	}
	for i := range ids {
		m.studies[ids[i]] = struct{}{}
	}
}

// ClearStudies clears the "studies" edge to the List entity.
func (m *UserMutation) ClearStudies() {
	m.clearedstudies = true
}

// StudiesCleared reports if the "studies" edge to the List entity was cleared.
func (m *UserMutation) StudiesCleared() bool {
	return m.clearedstudies
}

// RemoveStudyIDs removes the "studies" edge to the List entity by IDs.
func (m *UserMutation) RemoveStudyIDs(ids ...int) {
	if m.removedstudies == nil {
		m.removedstudies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.studies, ids[i])
		m.removedstudies[ids[i]] = struct{}{}
	}
}

// RemovedStudies returns the removed IDs of the "studies" edge to the List entity.
func (m *UserMutation) RemovedStudiesIDs() (ids []int) {
	for id := range m.removedstudies {
		ids = append(ids, id)
	}
	return
}

// StudiesIDs returns the "studies" edge IDs in the mutation.
func (m *UserMutation) StudiesIDs() (ids []int) {
	for id := range m.studies {
		ids = append(ids, id)
	}
	return
}

// ResetStudies resets all changes to the "studies" edge.
func (m *UserMutation) ResetStudies() {
	m.studies = nil
	m.clearedstudies = false
	m.removedstudies = nil
}

// AddSettingIDs adds the "settings" edge to the Settings entity by ids.
func (m *UserMutation) AddSettingIDs(ids ...int) {
	if m.settings == nil {
		m.settings = make(map[int]struct{})
	}
	for i := range ids {
		m.settings[ids[i]] = struct{}{}
	}
}

// ClearSettings clears the "settings" edge to the Settings entity.
func (m *UserMutation) ClearSettings() {
	m.clearedsettings = true
}

// SettingsCleared reports if the "settings" edge to the Settings entity was cleared.
func (m *UserMutation) SettingsCleared() bool {
	return m.clearedsettings
}

// RemoveSettingIDs removes the "settings" edge to the Settings entity by IDs.
func (m *UserMutation) RemoveSettingIDs(ids ...int) {
	if m.removedsettings == nil {
		m.removedsettings = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.settings, ids[i])
		m.removedsettings[ids[i]] = struct{}{}
	}
}

// RemovedSettings returns the removed IDs of the "settings" edge to the Settings entity.
func (m *UserMutation) RemovedSettingsIDs() (ids []int) {
	for id := range m.removedsettings {
		ids = append(ids, id)
	}
	return
}

// SettingsIDs returns the "settings" edge IDs in the mutation.
func (m *UserMutation) SettingsIDs() (ids []int) {
	for id := range m.settings {
		ids = append(ids, id)
	}
	return
}

// ResetSettings resets all changes to the "settings" edge.
func (m *UserMutation) ResetSettings() {
	m.settings = nil
	m.clearedsettings = false
	m.removedsettings = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.age != nil {
		fields = append(fields, user.FieldAge)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.Age()
	case user.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldAge:
		return m.OldAge(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, user.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldAge:
		m.ResetAge()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.studies != nil {
		edges = append(edges, user.EdgeStudies)
	}
	if m.settings != nil {
		edges = append(edges, user.EdgeSettings)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeStudies:
		ids := make([]ent.Value, 0, len(m.studies))
		for id := range m.studies {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSettings:
		ids := make([]ent.Value, 0, len(m.settings))
		for id := range m.settings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedstudies != nil {
		edges = append(edges, user.EdgeStudies)
	}
	if m.removedsettings != nil {
		edges = append(edges, user.EdgeSettings)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeStudies:
		ids := make([]ent.Value, 0, len(m.removedstudies))
		for id := range m.removedstudies {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSettings:
		ids := make([]ent.Value, 0, len(m.removedsettings))
		for id := range m.removedsettings {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstudies {
		edges = append(edges, user.EdgeStudies)
	}
	if m.clearedsettings {
		edges = append(edges, user.EdgeSettings)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeStudies:
		return m.clearedstudies
	case user.EdgeSettings:
		return m.clearedsettings
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeStudies:
		m.ResetStudies()
		return nil
	case user.EdgeSettings:
		m.ResetSettings()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
