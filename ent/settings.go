// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/list"
	"entgo.io/bug/ent/settings"
	"entgo.io/bug/ent/user"
	"entgo.io/ent/dialect/sql"
)

// Settings is the model entity for the Settings schema.
type Settings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// ListID holds the value of the "list_id" field.
	ListID int `json:"list_id,omitempty"`
	// Test holds the value of the "test" field.
	Test string `json:"test,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SettingsQuery when eager-loading is set.
	Edges SettingsEdges `json:"edges"`
}

// SettingsEdges holds the relations/edges for other nodes in the graph.
type SettingsEdges struct {
	// List holds the value of the list edge.
	List *List `json:"list,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ListOrErr returns the List value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SettingsEdges) ListOrErr() (*List, error) {
	if e.loadedTypes[0] {
		if e.List == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: list.Label}
		}
		return e.List, nil
	}
	return nil, &NotLoadedError{edge: "list"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SettingsEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Settings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case settings.FieldID, settings.FieldUserID, settings.FieldListID:
			values[i] = new(sql.NullInt64)
		case settings.FieldTest:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Settings", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Settings fields.
func (s *Settings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case settings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case settings.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				s.UserID = int(value.Int64)
			}
		case settings.FieldListID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field list_id", values[i])
			} else if value.Valid {
				s.ListID = int(value.Int64)
			}
		case settings.FieldTest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field test", values[i])
			} else if value.Valid {
				s.Test = value.String
			}
		}
	}
	return nil
}

// QueryList queries the "list" edge of the Settings entity.
func (s *Settings) QueryList() *ListQuery {
	return (&SettingsClient{config: s.config}).QueryList(s)
}

// QueryUser queries the "user" edge of the Settings entity.
func (s *Settings) QueryUser() *UserQuery {
	return (&SettingsClient{config: s.config}).QueryUser(s)
}

// Update returns a builder for updating this Settings.
// Note that you need to call Settings.Unwrap() before calling this method if this Settings
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Settings) Update() *SettingsUpdateOne {
	return (&SettingsClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Settings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Settings) Unwrap() *Settings {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Settings is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Settings) String() string {
	var builder strings.Builder
	builder.WriteString("Settings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserID))
	builder.WriteString(", ")
	builder.WriteString("list_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ListID))
	builder.WriteString(", ")
	builder.WriteString("test=")
	builder.WriteString(s.Test)
	builder.WriteByte(')')
	return builder.String()
}

// SettingsSlice is a parsable slice of Settings.
type SettingsSlice []*Settings

func (s SettingsSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
