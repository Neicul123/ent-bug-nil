// Code generated by ent, DO NOT EDIT.

package list

const (
	// Label holds the string label denoting the list type in the database.
	Label = "list"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeStudying holds the string denoting the studying edge name in mutations.
	EdgeStudying = "studying"
	// EdgeSettings holds the string denoting the settings edge name in mutations.
	EdgeSettings = "settings"
	// Table holds the table name of the list in the database.
	Table = "lists"
	// StudyingTable is the table that holds the studying relation/edge. The primary key declared below.
	StudyingTable = "settings"
	// StudyingInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	StudyingInverseTable = "users"
	// SettingsTable is the table that holds the settings relation/edge.
	SettingsTable = "settings"
	// SettingsInverseTable is the table name for the Settings entity.
	// It exists in this package in order to avoid circular dependency with the "settings" package.
	SettingsInverseTable = "settings"
	// SettingsColumn is the table column denoting the settings relation/edge.
	SettingsColumn = "list_id"
)

// Columns holds all SQL columns for list fields.
var Columns = []string{
	FieldID,
	FieldUserID,
}

var (
	// StudyingPrimaryKey and StudyingColumn2 are the table columns denoting the
	// primary key for the studying relation (M2M).
	StudyingPrimaryKey = []string{"user_id", "list_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
